/*------------------------------------------------------------
LineCommentOnOff
----------------------------------------
ModuleName:   LineCommentOnOff  EmEditor Macro
FileName:     LineCommentOnOff.jsee
Description:  プログラムの行コメントをOnOff切り替える
----------------------------------------
All  Right Reserved:
    Name:     Standard Software
    URL:      https://www.facebook.com/stndardsoftware/
--------------------------------------
Version:      2017/06/16
// ------------------------------------------------------------*/

//----------------------------------------
//include st.js
//--------------------
var fso = new ActiveXObject('Scripting.FileSystemObject')
//--------------------
var basePath = fso.GetParentFolderName(ScriptFullName);
var includeFileName;
//--------------------
includeFileName = '.\\lib\\stslib_win_wsh.js';
eval(
  fso.OpenTextFile(
    fso.BuildPath(basePath, includeFileName), 1)
  .ReadAll()
);
//--------------------
includeFileName = '.\\lib\\stslib_core.js'
eval(
  string_LoadFromFile(
    fso.BuildPath(basePath, includeFileName),
    encodingTypeJpCharCode.UTF8_BOM)
);
//--------------------
includeFileName = '.\\lib\\stslib_emeditor_macro.js';
eval(
  fso.OpenTextFile(
    fso.BuildPath(basePath, includeFileName), 1)
  .ReadAll()
);
//----------------------------------------

// var OUTPUT_MODE = 'ON';
var OUTPUT_MODE = 'OFF';

//ライブラリを読み込むと
//alertが上書きされてしまうので更に上書きして対応する
var alert = function (message) {
  if (OUTPUT_MODE === 'ON') {
    OutputBar.writeln(message);
  }
};

if (OUTPUT_MODE === 'ON') {
  OutputBar.Clear();
}

(function () {

  var stsLib = require('stsLib');
  //var s = stsLib.string;
  //stsLib.test.test_stslib_core();

  var e = stsLib.EmEditorMacro;
  var s = stsLib.string;

  //----------------------------------------
  //◇設定
  //----------------------------------------

  //動作モードを選択ラスト改行ありにする
  var lastLineBreak = e.lastLineBreakOption.ON;

  //行コメントアウト記号取得
  var lineCommentMark = document.Config.Highlight.LineComment1;
  //行コメントアウト記号の最後にスペースを追加
  lineCommentMark = stsLib.string.includeEnd(lineCommentMark, ' ');
  //※コメントアウト記号２は無視する

  var commentBegin = document.Config.Highlight.CommentBegin;
  var commentEnd = document.Config.Highlight.CommentEnd;

  //----------------------------------------
  //◇プログラム本体
  //----------------------------------------

  var sel = document.selection;
  var topY = sel.GetTopPointY(eePosLogical);
  var bottomY = sel.GetBottomPointY(eePosLogical);

  //行選択状態で最後に改行コードがついている場合は
  //処理範囲のtopとbottomを正しく修正している
  if (topY !== bottomY) {
    //複数行選択
    if (sel.GetBottomPointX(eePosLogical) === 1) {
      //下の選択が1列目=最終文字は改行含めた選択
      alert('bottomY -= 1;');
      bottomY -= 1;
    }
  }

  if (s.isEmpty(s.trimSpaceOnly(lineCommentMark))) {
    //行コメントアウト記号がない
    //＝ほとんどの場合はHTML
    if (s.isEmpty(s.trimSpaceOnly(commentBegin))
    || s.isEmpty(s.trimSpaceOnly(commentEnd))) {
      //開始終了コメント記号が無い場合は
      //何もしない
    } else {

      if (topY === bottomY) {
        alert('選択範囲が単一行の場合');

        //行選択
        e.selectLinesTopToBottom(topY, bottomY, lastLineBreak);
        sel.Text = e.setRangeCommentOnOff(topY, bottomY, commentBegin, commentEnd);
        e.selectLinesTopToBottom(topY, bottomY, lastLineBreak);
      } else {
        alert('選択範囲が複数行の場合');
        if (sel.GetActivePointY(eePosLogical) !== topY) {
          alert('複数行選択:上から下');
          alert(e.selectLinesTopToBottom.toString());
          e.selectLinesTopToBottom(topY, bottomY, lastLineBreak);
          sel.Text = e.setRangeCommentOnOff(topY, bottomY, commentBegin, commentEnd);
          e.selectLinesTopToBottom(topY, bottomY, lastLineBreak);

        } else {
          alert('複数行選択:下から上');
          e.selectLinesBottomToTop(topY, bottomY, lastLineBreak);
          sel.Text = e.setRangeCommentOnOff(topY, bottomY, commentBegin, commentEnd);
          e.selectLinesBottomToTop(topY, bottomY, lastLineBreak);
        }
      }

    }
  } else {
    //行コメントアウト記号がある
    //＝テキストかC++やJavaScriptなどの言語

    alert(sel.Text);

    if (topY === bottomY) {
      alert('選択範囲が単一行の場合');

      //行選択
      e.selectLinesTopToBottom(topY, bottomY, lastLineBreak);
      sel.Text = e.setLinesCommentOnOff(topY, bottomY,
        lineCommentMark, lastLineBreak);
      e.selectLinesTopToBottom(topY, bottomY, lastLineBreak);
    } else {
      alert('選択範囲が複数行の場合');
      if (sel.GetActivePointY(eePosLogical) !== topY) {
        alert('複数行選択:上から下');
        e.selectLinesTopToBottom(topY, bottomY, lastLineBreak);
        sel.Text = e.setLinesCommentOnOff(topY, bottomY,
          lineCommentMark, lastLineBreak);
        e.selectLinesTopToBottom(topY, bottomY, lastLineBreak);

      } else {
        alert('複数行選択:下から上');
        e.selectLinesBottomToTop(topY, bottomY, lastLineBreak);
        sel.Text = e.setLinesCommentOnOff(topY, bottomY,
          lineCommentMark, lastLineBreak);
        e.selectLinesBottomToTop(topY, bottomY, lastLineBreak);
      }
    }

  }

  alert('finish');
}());